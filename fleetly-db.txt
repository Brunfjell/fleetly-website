-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.expenses (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  trip_id uuid,
  type text NOT NULL,
  amount numeric NOT NULL CHECK (amount >= 0::numeric),
  reason text,
  proof_url text,
  reported_by uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT expenses_pkey PRIMARY KEY (id),
  CONSTRAINT expenses_reported_by_fkey FOREIGN KEY (reported_by) REFERENCES public.profiles(id),
  CONSTRAINT expenses_trip_id_fkey FOREIGN KEY (trip_id) REFERENCES public.trips(id)
);
CREATE TABLE public.files (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  trip_id uuid,
  expense_id uuid,
  user_id uuid,
  storage_path text NOT NULL,
  url text,
  mime_type text,
  size_bytes bigint,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT files_pkey PRIMARY KEY (id),
  CONSTRAINT files_expense_id_fkey FOREIGN KEY (expense_id) REFERENCES public.expenses(id),
  CONSTRAINT files_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT files_trip_id_fkey FOREIGN KEY (trip_id) REFERENCES public.trips(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  email text NOT NULL UNIQUE CHECK (char_length(email) >= 7),
  name text NOT NULL,
  phone text,
  role USER-DEFINED NOT NULL DEFAULT 'employee'::user_role,
  meta jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.sync_queue (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  client_id text,
  operation jsonb NOT NULL,
  status text DEFAULT 'pending'::text,
  attempts integer DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  processed_at timestamp with time zone,
  CONSTRAINT sync_queue_pkey PRIMARY KEY (id)
);
CREATE TABLE public.route_events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  trip_id uuid,
  point_seq integer NOT NULL,
  old_lat double precision,
  old_lng double precision,
  new_lat double precision,
  new_lng double precision,
  moved_by uuid,
  moved_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT route_events_pkey PRIMARY KEY (id),
  CONSTRAINT route_events_trip_id_fkey FOREIGN KEY (trip_id) REFERENCES public.trips(id),
  CONSTRAINT route_events_moved_by_fkey FOREIGN KEY (moved_by) REFERENCES public.profiles(id)
);
CREATE TABLE public.trip_route_points (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  trip_id uuid,
  seq integer NOT NULL,
  name text,
  lat double precision NOT NULL,
  lng double precision NOT NULL,
  point_time timestamp with time zone,
  is_start boolean DEFAULT false,
  is_destination boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT trip_route_points_pkey PRIMARY KEY (id),
  CONSTRAINT trip_route_points_trip_id_fkey FOREIGN KEY (trip_id) REFERENCES public.trips(id)
);
CREATE TABLE public.trips (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  requester_id uuid,
  driver_id uuid,
  vehicle_id uuid,
  status USER-DEFINED NOT NULL DEFAULT 'draft'::trip_status,
  reason text,
  start_time timestamp with time zone,
  end_time timestamp with time zone,
  start_location jsonb,
  end_location jsonb,
  route jsonb DEFAULT '[]'::jsonb,
  approver_id uuid,
  deny_reason text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  distance_travelled numeric,
  CONSTRAINT trips_pkey PRIMARY KEY (id),
  CONSTRAINT trips_approver_id_fkey FOREIGN KEY (approver_id) REFERENCES public.profiles(id),
  CONSTRAINT trips_requester_id_fkey FOREIGN KEY (requester_id) REFERENCES public.profiles(id),
  CONSTRAINT trips_vehicle_id_fkey FOREIGN KEY (vehicle_id) REFERENCES public.vehicles(id),
  CONSTRAINT trips_driver_id_fkey FOREIGN KEY (driver_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.vehicles (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  plate_number text NOT NULL UNIQUE,
  make text,
  model text,
  year integer,
  status USER-DEFINED NOT NULL DEFAULT 'active'::vehicle_status,
  odometer bigint DEFAULT 0,
  notes text,
  created_by uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT vehicles_pkey PRIMARY KEY (id),
  CONSTRAINT vehicles_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.profiles(id)
);